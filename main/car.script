-- Route

local route = {
  { position = vmath.vector3(0, 0.5, 23), stop = true },
  { position = vmath.vector3(0, 0.5, 6), stop = true },
  { position = vmath.vector3(0, 2.25, 3), stop = true },
  { position = vmath.vector3(0, 2.25, -4), stop = true },
  { position = vmath.vector3(0, 0.5, -7), stop = true },
  { position = vmath.vector3(0, 0.5, -18), stop = true },
  { position = vmath.vector3(1, 0.5, -18) },
  { position = vmath.vector3(3, 2.0, -18) },
  { position = vmath.vector3(16, 2.0, -18), stop = true },
  { position = vmath.vector3(16, 2.0, -11), stop = true },
  { position = vmath.vector3(15, 2.0, -11)},
  { position = vmath.vector3(13, 0.5, -11)},
  { position = vmath.vector3(0, 0.5, -11), stop = true },
  { position = vmath.vector3(-7, 0.5, -11), stop = true },
  { position = vmath.vector3(-17, 0.5, -11), stop = true },
  { position = vmath.vector3(-21, 0.5, -11), stop = true },
  { position = vmath.vector3(-21, -1, -11) },
  { position = vmath.vector3(0, -1, 25) },
  { position = vmath.vector3(0, 0.5, 25), stop = true },
  { position = vmath.vector3(0, 0.5, 23), stop = true },
}

-- Local

local function drive_to_next(self)
  self.route_index = self.route_index + 1

  if self.route_index > #self.route then
    self.route_index = 1
    return
  end

  local original = self.route[self.route_index - 1]
  local target = self.route[self.route_index]
  local distance = vmath.length(target.position - original.position)
  local duration = distance / self.speed
  local easing = go.EASING_LINEAR

  if original.stop and target.stop then
    easing = go.EASING_INOUTSINE
  elseif original.stop then
    easing = go.EASING_INSINE
  elseif target.stop then
    easing = go.EASING_OUTSINE
  end

  go.animate('.', 'position', go.PLAYBACK_ONCE_FORWARD, target.position, easing, duration, 0, function()
    drive_to_next(self)
  end)

  if self.route_index == 16 then
    -- Time to finish a chase
    msg.post('/scenario', hash 'road_is_over')
  end
end

-- Lifecycle

function init(self)
  self.speed = 3
  self.route_index = 1
  self.route = route
end

function update(self, dt)
  if self.operator then
    local position = go.get_position()
    local ground = physics.raycast(position, position + vmath.vector3(0, -1, 0), { hash 'default' })
    local ground_normal = ground and ground.normal or vmath.vector3(0, 1, 0)

    -- Tell the operator our ground normal to align camera
    msg.post(self.operator, hash 'ground_normal', { normal = ground_normal })
  end
end

function on_message(self, message_id, message)
  if message_id == hash 'operator_attached' then
    -- Operator is attached so let's drive
    self.operator = message.operator
    drive_to_next(self)
  elseif message_id == hash 'operator_detached' then
    self.operator = nil
  end
end