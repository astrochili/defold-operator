local operator = require 'operator.operator'
local hashes = require 'operator.hashes'

-- Lifecycle

function init(self)
  self.urls = {
    gui = msg.url('gui'),
    operator_1 = msg.url('/operator_1/operator'),
    operator_2 = msg.url('/operator_2/operator'),
    car = msg.url('car')
  }

  self.is_gui_enabled = true
  msg.post('.', hashes.acquire_input_focus)
  operator.set_debug(true)

  -- Prepare a car point

  self.car_point = {
    object = self.urls.car,
    look = vmath.vector3(-30, 0, 0),
    zoom = 3
  }

  -- Prepare a flight sequence

  self.flight_sequence = { }

  for index = 1, 14 do
    table.insert(self.flight_sequence, msg.url('/checkpoint_' .. index))
  end

  table.insert(self.flight_sequence, self.car_point)

  -- Activate the operator 2

  msg.post(self.urls.operator_2, hashes.activate)
  msg.post(self.urls.operator_2, hashes.follow_sequence, self.flight_sequence)
  msg.post(self.urls.gui, hash 'camera_did_change', { camera = 'CAMERA 2'})
end

function on_input(self, action_id, action)

  -- Functional actions

  if action_id == hash 'key_1' and action.released then
    msg.post(self.urls.operator_1, hashes.activate)
    msg.post(self.urls.gui, hash 'camera_did_change', { camera = 'CAMERA 1'})
  elseif action_id == hash 'key_2' and action.released then
    msg.post(self.urls.operator_2, hashes.activate)
    msg.post(self.urls.gui, hash 'camera_did_change', { camera = 'CAMERA 2'})
  elseif action_id == hash 'key_h' and action.released then
    self.is_gui_enabled = not self.is_gui_enabled
    msg.post(self.urls.gui, self.is_gui_enabled and hash('enable') or hash('disable'))
  elseif action_id == hash 'key_d' and action.released then
    operator.set_debug(not operator.is_debug())
  elseif action_id == hash 'key_esc' and action.released then
    msg.post(self.urls.operator_1, hashes.internal_control, { is_enabled = false })
    msg.post(self.urls.operator_2, hashes.internal_control, { is_enabled = false })
  elseif action_id == hash 'touch' and action.pressed then
    msg.post(self.urls.operator_1, hashes.internal_control, { is_enabled = true })
    msg.post(self.urls.operator_2, hashes.internal_control, { is_enabled = true })
  end

  -- Manual control

  local manual_control = { }

  if action_id == hash 'key_up' then
    manual_control.vertical = 1
  elseif action_id == hash 'key_down' then
    manual_control.vertical = -1
  elseif action_id == hash 'key_right' then
    manual_control.horizontal = 1
  elseif action_id == hash 'key_left' then
    manual_control.horizontal = -1
  elseif action_id == hash 'key_a' then
    manual_control.zoom = 1
  elseif action_id == hash 'key_z' then
    manual_control.zoom = -1
  end

  if next(manual_control) then
    local active_operator = operator.get_active_operator()
    msg.post(active_operator, hashes.manual_control, manual_control)
  end
end

function on_message(self, message_id, message)
  if message_id == hash 'road_is_over' then
    msg.post(self.urls.operator_2, 'follow_sequence', self.flight_sequence)
  end
end